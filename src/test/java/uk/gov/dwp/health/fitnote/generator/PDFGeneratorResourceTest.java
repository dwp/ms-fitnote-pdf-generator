package uk.gov.dwp.health.fitnote.generator;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.commons.io.IOUtils;
import org.apache.http.HttpStatus;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import uk.gov.dwp.health.fitnote.generator.domain.CreatePdfFromImageItem;
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.io.FileUtils;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import uk.gov.dwp.health.fitnote.generator.handlers.HtmlToPdfaHandler;
import uk.gov.dwp.health.fitnote.generator.util.DataTransformation;

import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.StatusType;
import java.io.File;
import java.io.IOException;
import java.text.ParseException;
import java.util.HashMap;
import java.util.Map;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.junit.Assert.assertNotNull;
import static org.mockito.Matchers.any;
import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;
import static org.mockito.Matchers.anyString;
import static org.mockito.Mockito.*;
import static org.mockito.Mockito.verifyZeroInteractions;

@RunWith(MockitoJUnitRunner.class)
public class PDFGeneratorResourceTest {

	// class to test...
	private PDFGeneratorResource resourceUnderTest;

	private static final String CLAIMANT_ADDRESS_JSON = "{\"houseNameOrNumber\" : \"254\", \"street\" : null,"
			+ "\"city\" : null, \"postcode\" : \"NE12 9PG\"}";

	private static String fullyEncodedJsonStringWithMobile = null;
	private static String fullyEncodedJsonStringNoMobile = null;

	@Mock
	private HtmlToPdfaHandler mockHtmlHandler;

	@Mock
	DataTransformation mockDataTransformation;

	@Captor
	private ArgumentCaptor<CreatePdfFromImageItem> transformCapture;

  @Before
  public void setup() throws IOException {
		// encode images and create json
		final String JPG_IMAGE_PATH = "src/test/resources/fitnotes/FullPage_Portrait.jpg";
		final String ENCODED_IMG = Base64.encodeBase64String(FileUtils.readFileToByteArray(new File(JPG_IMAGE_PATH)));

		fullyEncodedJsonStringWithMobile = String.format("{\"ninoObject\":{\"ninoBody\":\"AA370773\",\"ninoSuffix\":\"A\"}," +
			"\"image\":\"%s\",\"mobileNumber\":\"01632 960833\", \"claimantAddress\":" + CLAIMANT_ADDRESS_JSON + "}", ENCODED_IMG);
		fullyEncodedJsonStringNoMobile = String.format("{\"ninoObject\":{\"ninoBody\":\"AA370773\",\"ninoSuffix\":\"A\"}," +
			"\"image\":\"%s\", \"claimantAddress\":" + CLAIMANT_ADDRESS_JSON + "}", ENCODED_IMG);

    // set-up resource to test
		resourceUnderTest = new PDFGeneratorResource(mockHtmlHandler, mockDataTransformation, new ObjectMapper());

	}

		@Test
	public void validationSuccess() throws ParseException, IOException {

		String incomingJson = IOUtils.toString(getClass().getResourceAsStream("/test-case.json"));
		String pdfFile = "i-am-pdf";

		when(mockHtmlHandler.generateBase64PdfFromHtml(anyString())).thenReturn(Base64.encodeBase64String(pdfFile.getBytes()));

		PDFGeneratorResource instance = new PDFGeneratorResource(mockHtmlHandler, mockDataTransformation, new ObjectMapper());
		Map<String, String> valuesMap = new HashMap<>();
		when(mockDataTransformation.transformData(any())).thenReturn(valuesMap);

		Response response = instance.generatePdf(incomingJson);

		verify(mockHtmlHandler, times(1)).generateBase64PdfFromHtml(anyString());
		verify(mockDataTransformation, times(1)).transformData(any());
		verify(mockDataTransformation, times(1)).transformData(transformCapture.capture());

		assertThat(transformCapture.getValue().getApplicantNINO().getNinoBody(), is(equalTo("AA370773")));
		assertThat(transformCapture.getValue().getApplicantNINO().getNinoSuffix(), is(equalTo("A")));
		assertThat(transformCapture.getValue().getMobileNumber(), is(equalTo("07865432345")));
    assertThat(
        transformCapture.getValue().getEncodedImage(),
        is(
            equalTo("")));
		assertThat(transformCapture.getValue().getClaimantAddress().getHouseNameOrNumber(), is(equalTo("254")));
		assertThat(transformCapture.getValue().getClaimantAddress().getStreet(), is(equalTo("Bakers Street")));
		assertThat(transformCapture.getValue().getClaimantAddress().getCity(), is(equalTo("London")));
		assertThat(transformCapture.getValue().getClaimantAddress().getPostcode(), is(equalTo("NE12 9LG")));

		assertThat(response.getStatusInfo().getStatusCode(), is(equalTo(HttpStatus.SC_OK)));
		assertThat(response.getEntity(), is(equalTo(pdfFile.getBytes())));
	}

	@Test
	public void validationFailure() throws IOException {
		String incomingJson = "{\"key\":\"value\"}";

		PDFGeneratorResource instance = new PDFGeneratorResource(mockHtmlHandler, mockDataTransformation, new ObjectMapper());
		Response response = instance.generatePdf(incomingJson);
		verifyZeroInteractions(mockHtmlHandler);
		verifyZeroInteractions(mockDataTransformation);

		assertThat(response.getStatusInfo().getStatusCode(), is(equalTo(HttpStatus.SC_BAD_REQUEST)));
	}

	@Test
	public void nullRequestReject() throws Exception {
		StatusType returnMsg = resourceUnderTest.generatePdf(null).getStatusInfo();
		assertThat("'null' json should be rejected with 400", returnMsg.getStatusCode(), is(400));
	}

	@Test
	public void emptyRequestReject() throws Exception {
		StatusType returnMsg = resourceUnderTest.generatePdf("{}").getStatusInfo();
		assertThat("'empty' json should be rejected with 400", returnMsg.getStatusCode(), is(400));
	}

	@Test
	public void missingNinoReject() throws Exception {
		// mock json structures
		String MISSING_NINO_JSON = "{\"image\":null, \"claimantAddress\":" + CLAIMANT_ADDRESS_JSON + "}";
		StatusType returnMsg = resourceUnderTest.generatePdf(MISSING_NINO_JSON).getStatusInfo();
		assertThat("'missing' json should be rejected with 400", returnMsg.getStatusCode(), is(400));
	}

	@Test
	public void nullNinoReject() throws Exception {
		String NULL_NINO_JSON = "{\"ninoObject\":null,\"image\":null, \"claimantAddress\":" + CLAIMANT_ADDRESS_JSON + "}";
		StatusType returnMsg = resourceUnderTest.generatePdf(NULL_NINO_JSON).getStatusInfo();
		assertThat("'null' json should be rejected with 400", returnMsg.getStatusCode(), is(400));
	}

	@Test
	public void missingImgReject() throws Exception {
		String MISSING_IMG_JSON = "{\"ninoObject\":null, \"newAddress\":" + CLAIMANT_ADDRESS_JSON + "}";
		StatusType returnMsg = resourceUnderTest.generatePdf(MISSING_IMG_JSON).getStatusInfo();
		assertThat("'missing' json should be rejected with 400", returnMsg.getStatusCode(), is(400));
	}

	@Test
	public void nullImgReject() throws Exception {
		String NULL_IMG_JSON = "{\"ninoObject\":{\"ninoBody\":\"AA370773\",\"ninoSuffix\":\"A\"},\"image\":null," +
			" \"claimantAddress\":" + CLAIMANT_ADDRESS_JSON + "}";
		StatusType returnMsg = resourceUnderTest.generatePdf(NULL_IMG_JSON).getStatusInfo();
		assertThat("'null' json should be rejected with 400", returnMsg.getStatusCode(), is(400));
	}

	@Test
	public void emptyImgReject() throws Exception {
		String EMPTY_IMG_JSON = "{\"ninoObject\":{\"ninoBody\":\"AA370773\",\"ninoSuffix\":\"A\"},\"image\":\"\", " +
			"\"claimantAddress\":" + CLAIMANT_ADDRESS_JSON + "}";
		StatusType returnMsg = resourceUnderTest.generatePdf(EMPTY_IMG_JSON).getStatusInfo();
		assertThat("'empty' json should be rejected with 400", returnMsg.getStatusCode(), is(400));
	}

}
